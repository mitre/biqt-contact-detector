# Choose which Nvidia GPU to use
export CUDA_VISIBLE_DEVICES=1

# Will be used as prefix to IMG_PATH_FIELD value to form full image paths
DATASET_BASE=iris_datasets/combined_ndlcd/images
# Metadata csv file for training set
TRAIN_METADATA=metadata/train_cosmetic.csv
# Metadata csv file for validation set
VALIDATION_METADATA=metadata/validation_cosmetic.csv

# Field in metadata that contains the image paths
IMG_PATH_FIELD=image_path 
# Field in metadata that denotes image class (e.g. cosmetic contact lens or non-cosmetic contact lens)
# NOTE: The values of the labels can change which output of the network corresponds to which prediction, so
# when fine-tuning the original model use the following labels:
# Has cosmetic contact lens: Cosmetic
# Doesn't have cosmetic contact lens: Non-Cosmetic
LABEL_FIELD=contact_lens_type

# Number of epochs to train. Original training value was set to 200
NUM_EPOCHS=200 
# Tensorflow training patience. Number of epochs with no improvement after which training will be stopped. 
# Original training value was set to 20 
PATIENCE=20 

# Directory where results (logs, performance charts, models, etc.) are saved
RESULT_DIR=results_cosmetic

# Previous network checkpoint to fine-tune from. If training from scratch, comment out this line.
PREV_CHECKPOINT=../../../config/models/binary-cosmetic-contact-lens-model.hdf5



if ! [ -z $PREV_CHECKPOINT ]; then
    ckpt_param="--prev_checkpoint $PREV_CHECKPOINT"
else
	ckpt_param=""
fi

python3.7 train.py \
	--dataset_base $DATASET_BASE \
	--train_metadata_file $TRAIN_METADATA \
	--validation_metadata_file $VALIDATION_METADATA \
	--img_path_field $IMG_PATH_FIELD \
	--label_field $LABEL_FIELD \
	--patience $PATIENCE \
	--num_epochs $NUM_EPOCHS \
	--model CosmeticLensNetwork \
	--color_mode grayscale \
	--img_size 640 \
	--batch_size 20 \
	--lr_step_size 20 \
	--results_dir $RESULT_DIR \
	$ckpt_param
